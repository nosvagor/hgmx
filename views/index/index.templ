package index

import (
	"crypto/md5"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"sync"
	"time"
)

type Page struct {
	Title   string
	Content templ.Component
}

templ Index(page Page) {
	<!DOCTYPE html>
	<html 
		lang="en"
		class="cursor-default scrollbar-thin"
	>
		@Head()
		@Title(page.Title)
		@Body(page.Content)
		// @Footer()
	</html>
}

// =============================================================================
templ Head() {
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		@Favicon()
		@Style("/static/css/main.min.css")
		@Script(ScriptParams{Path: "/static/vendor/htmx.min.js"})
		@Script(ScriptParams{Path: "/static/vendor/_hyperscript.min.js"})
		// @Script(ScriptParams{Path: "/static/js/motion.min.js"})
		// <script>
		// 	const { animate, scroll } = Motion
		// </script>
	</head>
}

templ Body(content templ.Component) {
	<body class="font-sans bg-bgc-500 text-fgc-500 h-svh">
		@Main(content)
	</body>
}

templ Footer() {
	<footer>
		<p>Footer</p>
	</footer>
}

// =============================================================================
templ Favicon() {
	<link rel="icon" type="image/png" href="/static/assets/favicon/favicon-32x32.png" sizes="32x32"/>
	<link rel="shortcut icon" href="/static/assets/favicon/favicon.ico"/>
}

templ Title(title string) {
	<title>{ title }</title>
}

templ Main(content templ.Component) {
	<main class="w-[98%] md:w-[96%] h-full mx-auto">
		@content
	</main>
}

templ Nav() {
	<div
		class="fixed z-50 items-center justify-between hidden w-full px-8 py-2 text-lg transition-all duration-200 ease-out md:flex"
		_="on load from window 
			if window's scrollY is not 0 then add .nav-bg to me
			else remove .nav-bg from me
		end
		on scroll from window
			if window's scrollY is not 0 then add .nav-bg to me
			else remove .nav-bg from me
		end"
	>
		<a href="/" class="text-sm btn btn-subtle">Home</a>
		<div class="hidden gap-2 text-md md:flex">
			<a href="/services" class="btn btn-subtle">Services</a>
			<a href="/works" class="btn btn-subtle">Works</a>
			<a href="/careers" class="btn btn-subtle">Careers</a>
			<a href="/about" class="btn btn-subtle">About</a>
		</div>
		<a
			href="/contact"
			class="hidden my-1 text-base btn btn-active"
			style=" --btn-padding: 0.1rem 1rem; "
			_="on load from window
				if window's scrollY is 0 then add .hidden to me
				else remove .hidden from me
			end
			on scroll from window
				if window's scrollY is 0 then add .hidden to me
				else remove .hidden from me
			end"
		>
			Find a Solution
		</a>
	</div>
}

var (
	fileHashes      = make(map[string]string)
	fileHashesMutex sync.RWMutex
)

func hash(filePath string) string {
	fileHashesMutex.RLock()
	hash, exists := fileHashes[filePath]
	fileHashesMutex.RUnlock()

	if !exists {
		fullPath := filepath.Join("static", filePath)
		file, err := os.Open(fullPath)
		if err != nil {
			hash = fmt.Sprintf("?v=error-%d", time.Now().Unix())
		} else {
			defer file.Close()
			hashMD5 := md5.New()
			if _, err := io.Copy(hashMD5, file); err != nil {
				hash = fmt.Sprintf("?v=error-%d", time.Now().Unix())
			} else {
				hash = fmt.Sprintf("?v=%x", hashMD5.Sum(nil))
			}
		}

		fileHashesMutex.Lock()
		fileHashes[filePath] = hash
		fileHashesMutex.Unlock()
	}

	return hash
}

type ScriptParams struct {
	Path  string
	Defer bool
}

templ Script(p ScriptParams) {
	if p.Defer {
		<script defer src={ p.Path + hash(p.Path) }></script>
	} else {
		<script src={ p.Path + hash(p.Path) }></script>
	}
}

templ Style(path string) {
	<link rel="stylesheet" href={ path + hash(path) }/>
}
